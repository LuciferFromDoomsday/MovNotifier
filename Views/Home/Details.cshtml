@{
    ViewData["Title"] = "Home Page";

    Layout = "_Layout";

}
@using OMDbApiNet.Model;
@model dynamic
<div class="movie-card" style=" background-color: #141414">

    <div class="container">


        <style>
        .hero:before {
            background: url("@Model.Movie.Poster");
        }
        </style>
        <div class="hero">

            <div class="details">

     




            </div> <!-- end details -->

        </div> <!-- end hero -->

        <div class="description">

            <div class="column1" style="padding-bottom :50px"> 
                <h3>Genres :</h3>
                @foreach (Genre genre in Model.Genres)
                {
                    <span class="tag">
                        @Html.DisplayFor(modelItem => genre.Name)
                    </span>

                }

            </div> <!-- end column1 -->

            <div class="column2">
                <h3> @Model.Movie.Title </h3>

                @if (@Model.Movie.AvgRating < 5)
                {
                    <span style="color:darkred">Avarage Rating :  @Model.Movie.AvgRating/10  </span> 
                }
                else if (@Model.Movie.AvgRating > 5 && @Model.Movie.AvgRating < 8)
                {
                    <span style="color:yellow">Avarage Rating :  @Model.Movie.AvgRating/10 </span>
                }
                else
                {
                    <span style="color:green">Avarage Rating : @Model.Movie.AvgRating/10  </span>
                }
                @if (@Model.Movie.Description.Length < 60)
                {
                    <p>@Model.Movie.Description.Substring(0, @Model.Movie.Description.Length) ...</p>
                }
                else if (@Model.Movie.Description.Length > 60 && @Model.Movie.Description.Length < 200)
                {
                    <p>@Model.Movie.Description.Substring(0, @Model.Movie.Description.Length / 2) ...</p>
                }
                else if (@Model.Movie.Description.Length > 200 && @Model.Movie.Description.Length < 400)
                {
                    <p>@Model.Movie.Description.Substring(0, @Model.Movie.Description.Length / 3) ...</p>
                }
                else
                {
                    <p>@Model.Movie.Description.Substring(0, @Model.Movie.Description.Length / 5) ...</p>
                }






            </div> <!-- end column2 -->
            <div class="column3" style="float:right; margin-right: 50px">
             
                <div class="avatars">
                    <h3> Actors :</h3>
                    @foreach (Actor actor in Model.Actors)
                    {
                <p>
                    @Html.DisplayFor(modelItem => actor.name)
                </p>

                    }

                </div> <!-- end avatars -->
            </div>
        </div> <!-- end description -->


    </div> <!-- end container -->
</div> <!-- end movie-card -->

<br>
<br>
<br>
<br>
<script>
    const ratings = document.querySelectorAll(".rating");

// Iterate over all rating items
ratings.forEach((rating) => {
  // Get content and get score as an int
  const ratingContent = rating.innerHTML;
  const ratingScore = parseInt(ratingContent, 10);

  // Define if the score is good, meh or bad according to its value
  const scoreClass =
    ratingScore < 40 ? "bad" : ratingScore < 60 ? "meh" : "good";

  // Add score class to the rating
  rating.classList.add(scoreClass);

  // After adding the class, get its color
  const ratingColor = window.getComputedStyle(rating).backgroundColor;

  // Define the background gradient according to the score and color
  const gradient = `background: conic-gradient(${ratingColor} ${ratingScore}%, transparent 0 100%)`;

  // Set the gradient as the rating background
  rating.setAttribute("style", gradient);

  // Wrap the content in a tag to show it above the pseudo element that masks the bar
  rating.innerHTML = `<span>${ratingScore} ${
    ratingContent.indexOf("%") >= 0 ? "<small>%</small>" : ""
  }</span>`;
});


</script>